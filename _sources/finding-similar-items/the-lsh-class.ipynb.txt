{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "21a17351",
   "metadata": {},
   "source": [
    "# Many-to-Many Document Similarity Task"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29fae338",
   "metadata": {},
   "source": [
    "In this section, we implement the traditional LSH appraoch to a hypothetical many-to-many document similarity task. The objective is to bucket similar documents together. The implementation is done through the `LSH` class which leverages on `dask.bag` functionality and methods to *parallelize* the **banding technique**. Specifically, the map (hash function) and reduce (bucketing) tasks.\n",
    "\n",
    "The `LSH` has three main methods:\n",
    "\n",
    "* `make_bands` - This method takes in the desired number of `bands` as a parameter and returns a dictionary with band labels as keys and `dask.bag` of (set/document index, signature band) tuples. Here, signature bands are defined as a slice of a document's signature.\n",
    "    * Parameters\n",
    "        - `bands` - (int) desired number of bands\n",
    "    * Returns\n",
    "        - `band_dict` - (dict) dictionary with band labels as keys and (set/doc index, signature band) tuples as values\n",
    "        \n",
    "* `get_buckets` - This method implementes the map-reduce step of the traditional banding technique. Specifically, signature slices of each band are hashed using `hash_functions` (map). The document indices are then grouped according to their hash values.\n",
    "\n",
    "    * Parameters\n",
    "        - `hash_functions` - (list, default=None) a list of hash functions with size equivalent to the number of bands. A hash function in the list is applied to a band with the same index. When None, the funciton defaults to using the python builtin `hash` function. *Note: python's hash function value for the same input vary across partitions--hence, current implementation stores all elements of a band in one partition.*\n",
    "    * Returns\n",
    "        - band_buckets - (dict) a dictionary with hash bucket as keys and a list of similar document indices as values.\n",
    "* `plot_thresh` - Shows the S-curve corresponding to the choice of number of `bands`. The similirity threshold (i.e., the Jaccard similarity value that is the basis of tagging a pair as candidate pairs or not) is emphasized. \n",
    "    * Paramters\n",
    "        - `display_thresh` - (bool, default=True) whether to display emphasis on the similarity threshold or not.\n",
    "        - `ax` - (`matplotlib.pyplot Axis`, default=None) axis for plotting.\n",
    "        - `**kwargs` - keyword arguments for the `matplotlib.pyplot.plot()` function.\n",
    "    * Returns\n",
    "        - `matplotlib.pyplot` Axis object\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6440f7d6",
   "metadata": {},
   "source": [
    "## Examples\n",
    "\n",
    "Here we demonstrate the use of the `LSH` class on some examples. First off, make sure that a a `dask.distributed.Client` is initialized since class methods take advantage of the `dask`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d321fe7",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-03-29T05:54:08.231607Z",
     "start_time": "2022-03-29T05:54:02.313269Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from alis.similarity import LSH\n",
    "\n",
    "\n",
    "from dask.distributed import Client\n",
    "client = Client()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b156ee1d",
   "metadata": {},
   "source": [
    "### Example 1 \n",
    "\n",
    "Suppose a signature matrix with dimensions $(n, m)$--where $n$ is the number of documents/sets and $m$ as the size of each signature vector. Signature vector values are randomly set to be within the 0 to 255 range."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b2505d1b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-03-29T05:54:08.245046Z",
     "start_time": "2022-03-29T05:54:08.233836Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[128,  85, 248, ..., 226,  99,  91],\n",
       "       [247,  40, 159, ...,  39, 180,  52],\n",
       "       [161, 150,  16, ..., 138,  26, 230],\n",
       "       ...,\n",
       "       [200,  51, 193, ..., 141,  16, 245],\n",
       "       [ 28, 117,  35, ..., 236, 206, 252],\n",
       "       [180, 183,  98, ..., 240, 172,  23]])"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "n = 1000 # samples (rows)\n",
    "m = 100 # signature features (columns)\n",
    "\n",
    "# signature matrix\n",
    "signature = np.random.randint(255, size=(n, m))\n",
    "display(signature)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa914789",
   "metadata": {},
   "source": [
    "Running the `get_buckets` function `with compute=False` returns a `dask.bag` which can be inspected further using `dask.bag` functions, such as `filter`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "929b0c0f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-03-29T05:54:08.767421Z",
     "start_time": "2022-03-29T05:54:08.247003Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rows per band:  10\n",
      "Number of bands:  10\n",
      "Group of buckets:  10\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{0: dask.bag<lambda, npartitions=1>,\n",
       " 1: dask.bag<lambda, npartitions=1>,\n",
       " 2: dask.bag<lambda, npartitions=1>,\n",
       " 3: dask.bag<lambda, npartitions=1>,\n",
       " 4: dask.bag<lambda, npartitions=1>,\n",
       " 5: dask.bag<lambda, npartitions=1>,\n",
       " 6: dask.bag<lambda, npartitions=1>,\n",
       " 7: dask.bag<lambda, npartitions=1>,\n",
       " 8: dask.bag<lambda, npartitions=1>,\n",
       " 9: dask.bag<lambda, npartitions=1>}"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lsh = LSH(signature)\n",
    "lsh.make_bands(bands=10)\n",
    "print(\"Rows per band: \", lsh.r)\n",
    "print(\"Number of bands: \", lsh.bands)\n",
    "buckets = lsh.get_buckets()\n",
    "print(\"Group of buckets: \", len(buckets.keys()))\n",
    "\n",
    "display(buckets)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "864f47e6",
   "metadata": {},
   "source": [
    "Due to randomness of the dummy signature matrix values, we expect zero to minimal collisions. Filter results show that all bands return no similar signatures."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1e5a344d",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-03-29T05:54:11.503962Z",
     "start_time": "2022-03-29T05:54:08.771930Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "buckets[0].filter(lambda x: len(x[1]) > 1).compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd943655",
   "metadata": {},
   "source": [
    "Since the the signature matrix is relatively small, we can verify the lack in collisions by inspecting the threshold (i.e., through the `plot_thresh` method) and comparing it with the actual Jaccard similarity distribution of the signature marix. Exhaustively calculating the Jaccard similarity for all pairs may require some waiting time, ~30 seconds on a standard machine."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "eb906eee",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-03-29T05:54:11.668584Z",
     "start_time": "2022-03-29T05:54:11.505114Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plotting the s-curve\n",
    "ax = lsh.plot_thresh()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "39dfd2eb",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-03-29T05:54:14.731598Z",
     "start_time": "2022-03-29T05:54:11.670685Z"
    }
   },
   "outputs": [],
   "source": [
    "from itertools import combinations\n",
    "from scipy.spatial.distance import jaccard\n",
    "\n",
    "def jaccard_sim(u, v):\n",
    "    return 1 - jaccard(u, v)\n",
    "\n",
    "similarities = [jaccard_sim(signature[u_idx], signature[v_idx]) \\\n",
    "                for u_idx, v_idx in combinations(range(1000), 2)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "09403c5b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-03-29T05:54:16.051472Z",
     "start_time": "2022-03-29T05:54:14.734229Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# jaccard similarity distribution\n",
    "plt.hist(similarities, bins=10, log=True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a56e147",
   "metadata": {},
   "source": [
    "The above example illustrates a signature matrix with very low similarity scores as confirmed by the distribution plot of actual Jaccard similarities."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24abb8e3",
   "metadata": {},
   "source": [
    "### Example 2 \n",
    "\n",
    "Suppose we have a signature matrix where all items are similar. We see that across all bands, all the samples are placed in the same buckets. This time, we pass the `compute=True` flag to cast the `dask.bags` into a lists as values to the dictionary output of `get_buckets`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "883050a4",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-03-29T05:54:20.824280Z",
     "start_time": "2022-03-29T05:54:16.053070Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rows per band:  10\n",
      "Number of bands:  10\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{0: [(-4511045881551967787, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])],\n",
       " 1: [(-8359770896084742983, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])],\n",
       " 2: [(2866674764794135345, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])],\n",
       " 3: [(-4164649050109038293, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])],\n",
       " 4: [(-4511045881551967787, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])],\n",
       " 5: [(-8359770896084742983, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])],\n",
       " 6: [(2866674764794135345, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])],\n",
       " 7: [(-4164649050109038293, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])],\n",
       " 8: [(-4511045881551967787, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])],\n",
       " 9: [(-8359770896084742983, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])]}"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# some edge case : all items are similar\n",
    "n = 10\n",
    "m = 100\n",
    "\n",
    "# all values are 1\n",
    "signature = np.full((n, m), 1)\n",
    "\n",
    "lsh = LSH(signature)\n",
    "lsh.make_bands(bands=10)\n",
    "print(\"Rows per band: \", lsh.r)\n",
    "print(\"Number of bands: \", lsh.bands)\n",
    "display(lsh.get_buckets(compute=True))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b44d205",
   "metadata": {},
   "source": [
    "### Example 3 \n",
    "Suppose now another signature matrix where there are two groups of sets that are similar. We shall observe that for each band, we have two buckets corresponding to the two similarity groups (1's group and 2's group)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c82b4207",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-03-29T05:54:21.211243Z",
     "start_time": "2022-03-29T05:54:20.825811Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rows per band:  10\n",
      "Number of bands:  10\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{0: [(2866674764794135345, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),\n",
       "  (-8148071392985430698, [10, 11, 12, 13, 14, 15, 16, 17, 18, 19])],\n",
       " 1: [(-4164649050109038293, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),\n",
       "  (7929749226918372346, [10, 11, 12, 13, 14, 15, 16, 17, 18, 19])],\n",
       " 2: [(-4511045881551967787, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),\n",
       "  (499418812276172301, [10, 11, 12, 13, 14, 15, 16, 17, 18, 19])],\n",
       " 3: [(-8359770896084742983, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),\n",
       "  (5464707384305557384, [10, 11, 12, 13, 14, 15, 16, 17, 18, 19])],\n",
       " 4: [(2866674764794135345, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),\n",
       "  (-8148071392985430698, [10, 11, 12, 13, 14, 15, 16, 17, 18, 19])],\n",
       " 5: [(-4164649050109038293, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),\n",
       "  (7929749226918372346, [10, 11, 12, 13, 14, 15, 16, 17, 18, 19])],\n",
       " 6: [(-4511045881551967787, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),\n",
       "  (499418812276172301, [10, 11, 12, 13, 14, 15, 16, 17, 18, 19])],\n",
       " 7: [(-8359770896084742983, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),\n",
       "  (5464707384305557384, [10, 11, 12, 13, 14, 15, 16, 17, 18, 19])],\n",
       " 8: [(2866674764794135345, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),\n",
       "  (-8148071392985430698, [10, 11, 12, 13, 14, 15, 16, 17, 18, 19])],\n",
       " 9: [(-4164649050109038293, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),\n",
       "  (7929749226918372346, [10, 11, 12, 13, 14, 15, 16, 17, 18, 19])]}"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# two similar groups\n",
    "n = 10 # total of 20 samples\n",
    "m = 100\n",
    "\n",
    "# concatentate two full matrices: matrix of 1's and 2's\n",
    "signature = np.concatenate((np.full((n, m), 1), np.full((n, m), 2)))\n",
    "\n",
    "lsh = LSH(signature)\n",
    "lsh.make_bands(bands=10)\n",
    "print(\"Rows per band: \", lsh.r)\n",
    "print(\"Number of bands: \", lsh.bands)\n",
    "display(lsh.get_buckets(compute=True))"
   ]
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
