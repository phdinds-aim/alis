{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PageRank "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before we discuss the PageRank algorithm, let's take a quick look at its history and what motivated its creation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Early Search Engines"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Early approaches to search engines involved crawling web pages and then listing terms that appeared and storing them in an *inverted index*, a data structure that allows locating all places *pointed to* by a term. \n",
    "\n",
    "When a *search query* is given:\n",
    "* terms are extracted from the search query\n",
    "* pages are pointed to by the terms are retrieved\n",
    "* pages are ranked according to\n",
    "    * how the terms were used in the page (e.g. terms appearing in headers have more importance)\n",
    "    * how frequent those terms appeared in the page"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Term Spam"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Some unethical people saw the opportunity of fooling search engines to direct users to their site (a sort of free advertisement).  For example, if they want to direct users searching for 'movie' to their site, they would do the following:\n",
    "* Add a *lot* of occurances of the term 'movie' to their site (with font color similar to page's background to hide the text)\n",
    "* Do a search for *movie* and copy contents of the highest-ranked page (again, using the \"invisible text\" approach above).\n",
    "This technique for fooling a search engine into believing that a page is something that it is not is called *term spam*."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introducing Page Rank"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To combat term spam, Google introduced two innovations:\n",
    "* They introduced PageRank to assess the importance of pages\n",
    "    - A simulation of Web surfers, starting at a random page, randomly following outlinks in each page they visit. Process iterates many times. \n",
    "    - The pages visited more often by the surfers are considered more important\n",
    "* Pages were judged not only by the terms that appeared in them, but by the *terms used in the link* (the anchor text), and the terms near the links to that page."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Graph Notations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To illustrate how PageRank and other Link Analysis algorithms work, it is useful to think of the Web as a directed graph with the following characteristics:\n",
    "* **nodes** represent pages\n",
    "* **arcs** represent links from one page to another "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Defining and Displaying Graphs with NetworkX"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A useful package for defining and displaying graphs in python is NetworkX. Below is an illustration of how we create a directed graph by defining the graph's nodes and edges. We then show the graph with a call to the `draw` command."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import networkx as nx\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "G1 = nx.DiGraph()\n",
    "G1.add_nodes_from([\"A\",\"B\",\"C\",\"D\",\"E\"])\n",
    "G1.add_edges_from([\n",
    "    (\"A\",\"B\"), (\"A\",\"C\"), (\"A\",\"D\"), (\"A\",\"E\"), \n",
    "    (\"B\",\"A\"), (\"B\",\"D\"), \n",
    "    (\"C\",\"A\"),    \n",
    "    (\"D\",\"B\"), (\"D\",\"C\"),\n",
    "    (\"E\",\"B\"),\n",
    "])\n",
    "\n",
    "plt.figure()  \n",
    "plt.title(\"Graph 1. A Graph as a hypothetical representation of the web\")\n",
    "nx.draw(G1, node_size=500, node_color='orange', with_labels=True, font_weight='bold', arrowsize=20)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adjacency Matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The **Adjacency Matrix** is a representation showing which vertices are adjacent, i.e., connected by edges or links. Formally, if $A$ is the adjacency matrix of a graph $G$, and $a_{ij}$ are the elements of $A$, \n",
    "$a_{ij}=1$ if there is a link from node $i$ to node $j$, otherwise, $a_{ij}=0$.\n",
    "\n",
    "In the discussion later on Hubs and Authorities, this matrix will also be known as the **Link Matrix**. It represents the existence of outgoing links from one page to another.\n",
    "\n",
    "In NetworkX, the adjacency matrix can be computed using the `adjacency_matrix` function. This produces a sparse matrix. We can convert this to a dense matrix by calling the `toarray` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 1, 1, 1, 1],\n",
       "       [1, 0, 0, 1, 0],\n",
       "       [1, 0, 0, 0, 0],\n",
       "       [0, 1, 1, 0, 0],\n",
       "       [0, 1, 0, 0, 0]])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = nx.adjacency_matrix(G1).toarray()\n",
    "A"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Transition Matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the computation of PageRank, an important data structure is the **Transition Matrix**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Recall the idea of a surfer randomly browsing through the Web. Given graph $G1$, our hypothetical representation of the Web in Figure 1, if the surfer is at page A, the following are the probabilities of the next page he will visit:\n",
    "* page A: 0\n",
    "* page B: 1/4\n",
    "* page C: 1/4\n",
    "* page D: 1/4\n",
    "* page E: 1/4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can do the same for all other nodes and define a *Transition Matrix* to represent the the probabilities of where this surfer would go next, for any starting location in the Web. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To generate the Transition Matrix from a graph, we will need the *transpose* of its Adjacency Matrix as well as a vector of its out degrees (the number of links coming out from a node or page) . We have already computed for $G1$'s adjacency matrix and stored it in $A$; to get the outlinks of the nodes, we can use the graph's `out_degree` method: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OutDegreeView({'A': 4, 'B': 2, 'C': 1, 'D': 2, 'E': 1})"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "G1.out_degree"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We then convert this into an numpy array, getting only the values of the outdegrees:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 2, 1, 2, 1])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "d = np.array([x[1] for x in list(G1.out_degree)])\n",
    "d"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can compute the Transition matrix:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.  , 0.5 , 1.  , 0.  , 0.  ],\n",
       "       [0.25, 0.  , 0.  , 0.5 , 1.  ],\n",
       "       [0.25, 0.  , 0.  , 0.5 , 0.  ],\n",
       "       [0.25, 0.5 , 0.  , 0.  , 0.  ],\n",
       "       [0.25, 0.  , 0.  , 0.  , 0.  ]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M = A.T * (1/d)\n",
    "M"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def transition_matrix_beta(G):\n",
    "    \"\"\"\n",
    "    Compute the Transition Matrix given a NetworkX graph\n",
    "    This version cannot handle dead-ends, i.e., nodes without outlinks,\n",
    "    hence it's called beta\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    G : NetworkX graph\n",
    "        Graph to extract the transition matrix\n",
    "    Returns\n",
    "    -------\n",
    "    M : numpy array\n",
    "        Numpy array of the transition matrix of G\n",
    "    \"\"\"        \n",
    "    A = nx.adjacency_matrix(G).toarray()\n",
    "    d = np.array([x[1] for x in list(G.out_degree)])\n",
    "    M = A.T * (1/d)\n",
    "    return M"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that version of the function above cannot handle dead-ends (nodes without outlinks, to be discussed in a later section).    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The transition matrix could now be computed from a NetworkX graph as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.  , 0.5 , 1.  , 0.  , 0.  ],\n",
       "       [0.25, 0.  , 0.  , 0.5 , 1.  ],\n",
       "       [0.25, 0.  , 0.  , 0.5 , 0.  ],\n",
       "       [0.25, 0.5 , 0.  , 0.  , 0.  ],\n",
       "       [0.25, 0.  , 0.  , 0.  , 0.  ]])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "transition_matrix_beta(G1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This matrix $M$ represents the transition matrix of $G1$, with the indices for nodes A, B, C, D,E being 0,1,2,3,4 respectively."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## PageRank Computation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "PageRank is a function that assigns a real number to a page in the Web, reflecting the page's importance. There are variations in the algorithms that compute the PageRank. We will tackle a few of them in the succeeding sections. \n",
    "\n",
    "Formally, if $m_{ij}$ are the elements of $M$, and node $j$ has $d$ outgoing links, we set $m_{ij}$ to $1/d$ if there is a link from page $j$ to page $i$, otherwise, we set it to 0. From this, we get that the $j$th column represents the transition probability distribution for a surfer who is at node $j$. This matrix is the **idealized PageRank**. Note that the sum of each column is exactly 1. Such a matrix where each column sums up to one is said to be *stochastic*."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To compute the actual PageRank, we have to iterate the surfing process.\n",
    "* Surfer starts at any location in the web with equal probability. Let's represent this as $\\textbf{v}^{(0)}$.\n",
    "* After one step, the distribution of the surfer will be $\\textbf{v}^{(1)}$ = $M \\textbf{v}^{(0)}$\n",
    "* After two steps, the distribution of the surfer will be $\\textbf{v}^{(2)}$ = $M\\textbf{v}^{(1)}$ =  $M(M \\textbf{v}^{(0)})$ = $M^{2}  \\textbf{v}^{(0)}  $  \n",
    "\n",
    "{numref}`pagerank-update` below illustrates how $\\textbf{v}$ is updated for one iteration, showing that the updated value of $\\textbf{v}$ gives the new probability distribution  for all the nodes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```{figure} ./images/PageRank-Update-Mv.PNG\n",
    ":name: pagerank-update\n",
    ":width: 450px\n",
    "\n",
    "One iteration/update of PageRank Algorithm.\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can thus formulate an update rule $\\textbf{v}^{(i+1)} = M\\textbf{v}^{(i)}$, which is an example of a *Markov process*.  It is known that such a process will stabilize at $\\textbf{v} = M\\textbf{v}$ if the following conditions are met:\n",
    "1. The graph is strongly connected\n",
    "2. There are no dead ends"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above, we observe that stability can be reached if $M\\textbf{v}$ no longer updates $\\textbf{v}$. \n",
    "\n",
    "This $\\textbf{v}$ is, in fact, the an *eigenvector* of $M$. Recall:\n",
    "An *eigenvector* of a matrix $M$ is a vector $\\textbf{v}$ that satisfies\n",
    "$$ \\textbf{v}= \\lambda M \\textbf{v} $$\n",
    "where $\\lambda$ is some constant known as the *eigenvalue*.\n",
    "\n",
    "Since $M$ is stochastic, we can further say that $\\textbf{v}$ is the principal eigenvector of $M$ and $\\lambda =1$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From this, we can say that the principal eigenvector of $M$  gives us the probability distribution of where (at which page) a random surfer would most likely be after a long time. Thus,the principal eigenvector actually gives us the PageRank of each page. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Iterative Method for Computing PageRank"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, we summarize the process of computing the PageRank known as the *Power Iteration Method*. Given $n$ pages/nodes:\n",
    "1. Create the characteristic matrix $M$  (size $nxn$), whose elements $m_{ij}$ are defined as follows:\n",
    " \n",
    "    $\n",
    "        m_{ij}=\\left\\{\n",
    "        \\begin{array}{@{}ll@{}}\n",
    "        1/d, & \\text{if there is a link from page } j \\text{ to } i \\text{ and page } j \\text{ has } d \\text{ outlinks}\\\\\n",
    "        0, & \\text{otherwise}\n",
    "        \\end{array}\\right.\n",
    "    $\n",
    "\n",
    "\n",
    "2. Initialize $\\textbf{v}^{(0)}$ \n",
    "\n",
    "    $\n",
    "        \\textbf{v}^{(0)}_{i} = 1/n \\text{, for all } i \n",
    "    $\n",
    "\n",
    "\n",
    "3. Iteratively update $\\textbf{v}$ \n",
    "\n",
    "    $\n",
    "    \\textbf{v}^{(t+1)} = M\\textbf{v}^{(t)}\n",
    "    $\n",
    "\n",
    "\n",
    "4. Stop when $\\lvert \\textbf{v}^{(t+1)}-\\textbf{v}^{(t)} \\rvert < \\epsilon $."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Power Iteration Method for Computing the Idealized PageRank"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To get a concrete idea how the algorithm works, below is a python implementation of the Idealized PageRank using the Power Iteration Method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def idealized_page_rank(M, tol=10**-6, max_iter=100):\n",
    "    \"\"\"\n",
    "    Compute the Idealized PageRank (without Taxation) of a given Transition Matrix    \n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    M : numpy array\n",
    "        Transition Matrix: Array of shape (n, n), where n is the number of nodes in the network\n",
    "    tol : float\n",
    "        Tolerance: Iteration stops if the distance between previous and updated PageRank vectors \n",
    "        goes below this value\n",
    "    max_iter : integer\n",
    "        Maximum number of iterations\n",
    "    Returns\n",
    "    -------\n",
    "    v : numpy array\n",
    "        Vector of size n containing the ordinary PageRank values \n",
    "    \"\"\"    \n",
    "    n = M.shape[0]\n",
    "    v = np.ones(n)/n\n",
    "    delta = 1/tol # initialize vector difference to a large number\n",
    "    i = 0\n",
    "    while delta > tol:\n",
    "        i += 1\n",
    "        prev_v = v\n",
    "        v = M.dot(v)\n",
    "        delta = np.sum(np.abs(v-prev_v))\n",
    "        if i >= max_iter:\n",
    "            break\n",
    "    return v"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Applying function to the $G1$ in Figure 1, we get the following results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.30000001, 0.25000013, 0.17500001, 0.1999999 , 0.07499995])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M = transition_matrix_beta(G1)\n",
    "idealized_page_rank(M)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Issues with PageRank"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this subsection, we consider two issues that affect the computation of PageRank."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Deadends"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, let's take a look at *deadends*, pages with no outgoing links. The graph $G2$ below is the same as $G1$ except that the outgoing link from node E was removed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "G2 = nx.DiGraph()\n",
    "G2.add_nodes_from([\"A\",\"B\",\"C\",\"D\",\"E\"])\n",
    "G2.add_edges_from([\n",
    "    (\"A\",\"B\"), (\"A\",\"C\"), (\"A\",\"D\"), (\"A\",\"E\"), \n",
    "    (\"B\",\"A\"), (\"B\",\"D\"), \n",
    "    (\"C\",\"A\"),    \n",
    "    (\"D\",\"B\"), (\"D\",\"C\"),\n",
    "    # no outgoing link from node E\n",
    "])\n",
    "\n",
    "plt.figure()  \n",
    "plt.title(\"Graph 2. A network with a deadend (at node E).\")\n",
    "nx.draw(G2, node_size=500, node_color='orange', with_labels=True, font_weight='bold', arrowsize=20)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Consider the graph bove.  Here we see that node E does not have any outgoing links, thus E is a deadend. The problem with deadends is that it is like a sink for infornation because while it 'absorbs' PageRank scores during the iterations: it does not pass them on to other nodes. As a result, some or all the components would eventually go to zero."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To see this effect, let us edit our `transition_matrix` function to handle nodes with zero degrees. The main problem is that a division by zero error could occur when we divide $A.T$ by $d$ if  $d$ has zero values. To address this, we just set the zero values of $d$ to 1. This will not affect the resulting matrix since the corresponding column in $A.T$ will all be zeros (recall that there are no outlinks for this node.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def transition_matrix(G):\n",
    "    \"\"\"\n",
    "    Compute the Transition Matrix given a NetworkX graph\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    G : NetworkX graph\n",
    "        Graph to extract the transition matrix\n",
    "    Returns\n",
    "    -------\n",
    "    M : numpy array\n",
    "        Numpy array of the transition matrix of G\n",
    "    \"\"\"        \n",
    "    A = nx.adjacency_matrix(G).toarray()\n",
    "    d = np.array([x[1] for x in list(G.out_degree)])\n",
    "    \n",
    "    # get indices with zero and replace them with 1 to avoid division by zero\n",
    "    # this won't affect the result since the corresponding column will have all zeros\n",
    "    d[d==0]=1\n",
    "    \n",
    "    M = A.T * (1/d)    \n",
    "    return M"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's now compute the transition matrix for Graph 2 and see what happens when we apply the Power Iteration Method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.  , 0.5 , 1.  , 0.  , 0.  ],\n",
       "       [0.25, 0.  , 0.  , 0.5 , 0.  ],\n",
       "       [0.25, 0.  , 0.  , 0.5 , 0.  ],\n",
       "       [0.25, 0.5 , 0.  , 0.  , 0.  ],\n",
       "       [0.25, 0.  , 0.  , 0.  , 0.  ]])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M2 = transition_matrix(G2)\n",
    "M2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we observe that the characteristic Matrix is no longer *stochastic* - the sum at column E is 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1., 1., 1., 1., 0.])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M2.sum(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "r = idealized_page_rank(M2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0., 0., 0.])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.rint(r)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We observe that the final values of all elements of $\\textbf{v}$ are 0."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Spider Traps"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Another issue that PageRank algorithm has to face is the existence of spider traps. A spider trap is a set of nodes with no dead ends but no link out of the set of nodes comprising the spider trap. The effect on the PageRank algorithm is the opposite of deadends. Whereas in deadends information \"leaks out\" from the deadend, in the case of spider traps, they get accumulated.\n",
    "Graph 3 shown by {numref}`spider-trap` below is an example of a network with a 1-node spider trap."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```{figure} ./images/SpiderTrap.PNG\n",
    ":width: 450px\n",
    ":name: spider-trap\n",
    "\n",
    "(Graph 3): A network with a spider trap (at node E).\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Note**: Earlier versions of NetworkX might not show the self-loop in Node E, that's why we provided an image above. However, it can be confirmed in the transition matrix below that the self-loop exists if you look at the noting that the entry for row-column of E is 1 (M3[4,4] below)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "G3 = nx.DiGraph()\n",
    "G3.add_nodes_from([\"A\",\"B\",\"C\",\"D\",\"E\"])\n",
    "G3.add_edges_from([\n",
    "    (\"A\",\"B\"), (\"A\",\"C\"), (\"A\",\"D\"), (\"A\",\"E\"), \n",
    "    (\"B\",\"A\"), (\"B\",\"D\"), \n",
    "    (\"C\",\"A\"),    \n",
    "    (\"D\",\"B\"), (\"D\",\"C\"),\n",
    "    (\"E\",\"E\"),\n",
    "])\n",
    "\n",
    "plt.figure()  \n",
    "plt.title(\"Graph 3. A network with a spider trap (at node E).\")\n",
    "pos = nx.circular_layout(G3)\n",
    "nx.draw(G3, pos, node_size=500, node_color='orange', with_labels=True, font_weight='bold', arrowsize=20)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.  , 0.5 , 1.  , 0.  , 0.  ],\n",
       "       [0.25, 0.  , 0.  , 0.5 , 0.  ],\n",
       "       [0.25, 0.  , 0.  , 0.5 , 0.  ],\n",
       "       [0.25, 0.5 , 0.  , 0.  , 0.  ],\n",
       "       [0.25, 0.  , 0.  , 0.  , 1.  ]])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M3 = transition_matrix(G3)\n",
    "M3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we compute the PageRank, we'll notice that all the traffic goes to node E."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0., 0., 1.])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r = idealized_page_rank(M3)\n",
    "np.rint(r)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## PageRank with Taxation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A solution to the two issues we mentioned above (deadends and spider traps) is to allow each random surfer to *teleport* with a small probability $\\beta$ rather than following an out-link in its current page. This method of random teleportation is called *taxation* in the textbook.\n",
    "\n",
    "If $\\textbf{e}$ is a vector of 1's of size $n$, The iteration step now becomes:\n",
    "\n",
    "$\n",
    "    \\textbf{v}^{(t+1)}= \\beta M\\textbf{v}^{(t)} + (1-\\beta)\\textbf{e}/n\n",
    "$\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\\beta$ values are usually chosen in the range of 0.8 to 0.9. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We create a taxed version of the PageRank below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def taxed_page_rank(M, beta=0.8, tol=10**-6, max_iter=100):\n",
    "    \"\"\"Compute the Taxed PageRank (without Taxation) of a given Transition Matrix    \n",
    "       Note that this not make use of `e` -- the vector of ones \n",
    "       since numpy's broadcasting takes care of properly computing a vector-constant addition\n",
    "    Parameters\n",
    "    ----------\n",
    "    M : numpy array\n",
    "        Transition Matrix: Array of shape (n, n), where n is the number of nodes in the network\n",
    "    tol : float\n",
    "        Tolerance: Iteration stops if the distance between previous and updated PageRank vectors \n",
    "        goes below this value\n",
    "    max_iter : integer\n",
    "        Maximum number of iterations\n",
    "    Returns\n",
    "    -------\n",
    "    v : numpy array\n",
    "        Vector of size n containing the ordinary PageRank values \n",
    "    \"\"\"    \n",
    "    n = M.shape[0]\n",
    "    v = np.ones(n)  \n",
    "    delta = 1/tol # initialize vector difference to a large number\n",
    "    i = 0\n",
    "    while delta > tol:\n",
    "        i += 1\n",
    "        prev_v = v\n",
    "        v = beta*M.dot(v) + ((1-beta)/n)  \n",
    "        delta = np.sum(np.abs(v-prev_v))  # compute L1 norm  \n",
    "        if i >= max_iter:\n",
    "            break\n",
    "    return v"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.2       , 0.13333334, 0.13333334, 0.13333334, 0.40000391])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M3 = transition_matrix(G3)\n",
    "taxed_page_rank(M3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using PageRank in Search Engine"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Google is said to use over 250 properties of pages from which the ranking is decided, among those properties, PageRank is among the important ones. The others are:\n",
    "- presence of search terms\n",
    "- where the search terms appear in the page (e.g. headers)\n",
    "- search terms appearing in pages that link to the page in question"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**EXERCISES**\n",
    "\n",
    "1. As discussed above, Google introduced the innovation of judging the importance of a page by the terms used in the link, and not just hte links that appeared in the page. How does this defeat Term Spam?\n",
    "2. Why not just count the number of inlinks to a page instead of doing PageRank?\n",
    "3. Given Graph 1, remove node E and its edges then compute its PageRank. (This is the example give in Lescovec et al.'s book {cite:ps}`leskovec2020mining`).\n",
    "4. Given Graph 3, remove node E and its edges then compute its Taxed PageRank. (This is the example give in Lescovec et al.'s book {cite:ps}`leskovec2020mining`)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**REFERENCE** {cite:ps}`leskovec2020mining`"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:.conda-dla2]",
   "language": "python",
   "name": "conda-env-.conda-dla2-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "294.188px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
